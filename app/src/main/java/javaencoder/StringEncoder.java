/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package javaencoder;

import java.util.*;
import java.util.Map.Entry;

public class StringEncoder {
    // Creating empty hash map
    static DataStorage x = new DataStorage();
    static Integer offsetValue = null;
    static HashMap<String,Integer> hm = x.getDataMap();

    // Data to CHANGE

    
    public static void main(String[] args) {
        // Declarations
        String offsetCharacter = "B";
        String plainText = "HELLO WORLD";
        // String encodedString = null;
        // String decodedString = null;


        offsetValue = hm.get(offsetCharacter);
        encode(plainText);
        

        
        
        

    }



    public static String encode(String plainText){
        // Offset value = 1
        // With the offset value, get Key
        Integer newOffSetValue = null;
        String currentStr = null;
        String newStr = null;

        System.out.println("Offset Value: " + offsetValue);

        for (int i=0; i<plainText.length(); i++){
            currentStr = String.valueOf(plainText.charAt(i));    
            System.out.println("Current Character: " + currentStr);
            
            if (currentStr.contains(" ") || currentStr.isEmpty()){
                // do nothing
                continue;
            }
            // get index + offset value
            newOffSetValue = hm.get(currentStr) - offsetValue;
            System.out.println(newOffSetValue);
            // get key value (encoded)
            for(Entry<String,Integer> entry: hm.entrySet()){
                // System.out.println("Entry.getKey(): " + entry.getKey());
                // System.out.println("Entry.getValue(): " + entry.getValue());
                if(entry.getValue().equals(newOffSetValue)){
                    System.out.println("KEY IS: " + entry.getKey());
                    break;
                } 
            }
            

        }

        

        return plainText;
    }

    public String decode(String encodedText){
        
        return encodedText;
    }

    
}
